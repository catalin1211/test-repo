This is a test repository for setting up github.
Nothing interesting will happen here.

Points to follow

* how to commit something locally

modify a file or create a new one
add it to staged area with "git add"
use "git commit" to commit it - !locally

* how to push the commit to remote repository

set up the remote repository using "git remote add origin https://github.com/catalin1211/test-repo"
this is just a link between you local repository and the remote one
can be seen with "git remote [-v]"; also "git remote show origin"
the name of the remote repository is now "origin"

"git push origin master" will push your commits to the remote repository

* how to update your local copy

get the latest remote info via "git fetch"
that does not modify you working copy
see the differences between what you have and what is on the server with "git diff origin/master" (or "git diff ..origin/master" which I think takes into account only your committed work, not your changes as well)
after "git fetch" you can merge the new data into your working copy with "git merge"

* conflicts when merging - uncommitted changes

if you have uncommitted changes before merging you will get an error message saying that you must either dicard or commit your changes (or stash them, but that's too advanced for me right now)
discarding your uncommitted is done as suggested via "git status": "git checkout -- <file>" (<file> can be a path as well, ex: ".", the current path)
now if you run "git merge" the remote changes will be merged to your working copy
in the simple case where you have no divergin changes, you working copy will be "fast-forwarded" to the latest data (in effect, there was no merge, your working copy was just updated)

[* sidetrack: git commit -amend + git push

you can use "git commit -amend" to update, or rectify, your last commit. For example, you can change the commit message.
however, if your last commit was already pushed to the remote repo, after the amend it will appear as if your local copy and the remote have diverged by one commit each; you must then fetch + merge the data from the remote, witch will create a "merge commit" with the two parrents as you original commit before the amend and the commit after the amend; pushing this back to remote will get you back to a clean "git status"
(this is what happened with commits 3 - 4 - 5 on this repository)]

* conflicts when merging - committed changes

if you have committed changes that have not been pushed upstream, and you try to fetch and merge changes that interfere you might need to resolve the conflict
a merge commit will be created and added to the history, which you will then need to push upstream in order to bring your local copy and the remote in sync (with your aforementioned changes included)

* how to see incoming changes from remote

doing a "git fetch" will get the latest data from your remotes
it is very important to know that fetching will not touch your local branches
if you want to see what happend on the remote branch, effectively, what has been modified since your last merge or pull you can use these commands:
	"git log -p HEAD..origin/master"
	"git log --name-status HEAD..origin/master"
	"git diff HEAD...origin"
notice the triple dot in the last command; that tells to show the diff between the common ancestor commit of the two branches and the latest commit on origin; this can also be simply "git diff ...origin/master"; take care that "git diff HEAD..origin/master" shows you what is different between the working copy head and the remote one, so both changes are included in the diff


